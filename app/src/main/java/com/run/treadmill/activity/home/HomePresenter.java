package com.run.treadmill.activity.home;import android.app.backup.BackupManager;import android.content.Context;import android.content.res.Configuration;import com.google.gson.Gson;import com.run.android.ShellCmdUtils;import com.run.serial.SerialCommand;import com.run.treadmill.activity.appStore.AppBean;import com.run.treadmill.activity.appStore.AppBean.AppInfo;import com.run.treadmill.activity.runMode.RunningParam;import com.run.treadmill.base.BasePresenter;import com.run.treadmill.base.EventMessage;import com.run.treadmill.common.CTConstant;import com.run.treadmill.common.InitParam;import com.run.treadmill.http.DownloadListener;import com.run.treadmill.http.OkHttpCallBack;import com.run.treadmill.http.OkHttpHelper;import com.run.treadmill.manager.ControlManager;import com.run.treadmill.manager.ErrorManager;import com.run.treadmill.manager.Md5Manager;import com.run.treadmill.manager.SpManager;import com.run.treadmill.manager.SystemBrightManager;import com.run.treadmill.manager.SystemSoundManager;import com.run.treadmill.manager.WifiBTStateManager;import com.run.treadmill.manager.control.NormalParam;import com.run.treadmill.manager.control.ParamCons;import com.run.treadmill.util.FileUtil;import com.run.treadmill.util.Logger;import com.run.treadmill.util.VersionUtil;import org.greenrobot.eventbus.EventBus;import java.io.File;import java.io.IOException;import java.lang.reflect.Method;import java.util.Arrays;import java.util.List;import java.util.Locale;import okhttp3.Call;import okhttp3.HttpUrl;/** * @Description 这里用一句话描述 * @Author GaleLiu * @Time 2019/05/29 */public class HomePresenter extends BasePresenter<HomeView> implements DownloadListener, OkHttpCallBack {    private int isPermitUpdateApk = CTConstant.INSTALL_UNKNOW;    /**     * 是否成功请求过检测新版apk     */    private boolean isHasRequestNewApk = false;    /**     * 是否为切换路径后成功请求过检测新版apk     */    private boolean isAlterUpdatePath = false;    /**     * 是否已经下载apk     */    private boolean isDownloadApk = false;    private Thread mThread;    /**     * 是否有网络     */    private boolean isHasNetword;    /**     * 当前是否是新版本     */    boolean isNewVersion;    private Context mContext;    private AppInfo appInfo;    /**     * 油箱残余油量状态     */    private int machineLubeValue = 0;    private String reqUrl = "";    private long time;    void setContext(Context context) {        this.mContext = context;    }    /**     * 对比版本信息     */    private void comparedAppVersion() {        String appVersionName = VersionUtil.getAppVersionName(mContext);        String lastAppVersionName = SpManager.getLastAppVersionName();        isNewVersion = VersionUtil.isNewVersion(lastAppVersionName, appVersionName, "V");        Logger.i(TAG, "appVersionName == " + appVersionName);        Logger.i(TAG, "lastAppVersionName == " + lastAppVersionName);        Logger.i(TAG, "isNewVersion == " + isNewVersion);        if (isNewVersion && SpManager.getUpdateIsNetwork()) {            getView().showTipsPoint();        }        if (!appVersionName.equals(lastAppVersionName)) {            SpManager.setLastAppVersionName(appVersionName);        }        SpManager.setUpdateIsNetwork(false);    }    /**     * 检测加油提示和加锁     */    void checkLubeAndLock() {        if (SpManager.getMaxLubeDis() != 0 && SpManager.getMaxLubeDis() - SpManager.getRunLubeDis() <= 0) {            getView().showLube();            return;        }        if ((SpManager.getBackUpTotalRunDis() > 0 && (SpManager.getBackUpTotalRunDis() - SpManager.getBackUpRunDis() <= 0))                || (SpManager.getBackUpRunTotalTime() > 0 && (SpManager.getBackUpRunTotalTime() - SpManager.getBackUpRunTime() <= 0))) {            getView().showLock();            return;        }        /*if (checkMachineLubeNull()) {            getView().showMachineLue(CTConstant.SHOW_TIPS_MACHINE_LUBE_NULL);        }*/    }    public boolean checkMachineLubeNull() {//        return (machineLubeValue != 0);        return false;    }    public void startMachineLubeTimer() {        getView().reSetSleepTime();        getView().startMachineLubeTimer();    }    public void setUpRunningParam(boolean isMetric) {        RunningParam.reset();        Arrays.fill(RunningParam.getInstance().mInclineArray, 0.0f);        Arrays.fill(RunningParam.getInstance().mSpeedArray, SpManager.getMinSpeed(isMetric));    }    void obtainUpdate() {        if (SpManager.getInstallOpen()) {            SpManager.setInstallOpen(false);            //关闭十字线            new Thread() {                @Override                public void run() {                    ShellCmdUtils.getInstance().execCommand("settings put system pointer_location 0");                    SpManager.setDisplay(false);                    //TODO:重置工程模式二的预设值                }            }.start();        }        Logger.d(TAG, "isHasRequestNewApk == " + isHasRequestNewApk);        Logger.d(TAG, "isAlterUpdatePath=" + isAlterUpdatePath + ",SpManager.getAlterUpdatePath " + SpManager.getAlterUpdatePath());        if (isHasRequestNewApk) {            if (isAlterUpdatePath || (!SpManager.getAlterUpdatePath())) {                Logger.i(TAG, "obtainUpdate return");                return;            }        }        if (SpManager.getChangedServer()) {            mThread.interrupt();            mThread = null;            Logger.d(TAG, "mThread = null;");            isHasNetword = false;            isAlterUpdatePath = false;            SpManager.setChangedServer(false);        }        if (mThread == null) {            mThread = new Thread(() -> {                try {                    Logger.d(TAG, "isHasNetword == " + isHasNetword);                    while (!isHasNetword) {                        isHasNetword = WifiBTStateManager.isNetworkConnected(mContext);                        if (isHasNetword) {                            this.reqUrl = InitParam.getUpdateHost(mContext) + InitParam.UPDATE_TREADMILL_END + InitParam.PROJECT_NAME;                            Logger.i(TAG, "请求的url：" + this.reqUrl);                            OkHttpHelper.get(this.reqUrl, "HomeActivity", this);                            isAlterUpdatePath = SpManager.getAlterUpdatePath();                            isHasRequestNewApk = true;                        }                        Thread.sleep(3000);                    }                } catch (Exception e) {                    e.printStackTrace();                }            });            mThread.start();        }    }    void enterSettingLock() {        getView().enterSettingLock();    }    void enterFactoryTwo() {        getView().enterFactoryTwo();    }    @Override    public void onSucceed(byte[] data, int len) {        super.onSucceed(data, len);        if (data[2] == SerialCommand.TX_RD_SOME && data[3] == ParamCons.NORMAL_PACKAGE_PARAM) {            machineLubeValue = resolveDate(data, NormalParam.LUBE_BOX_VALUE_INX, NormalParam.LUBE_BOX_VALUE_LEN);        }    }    @Override    public void onSuccess(Call call, String response) {        HttpUrl url = call.request().url();        Logger.i(TAG, "==== onSuccess ==== url ==" + url.toString());        Logger.i(TAG, "==== onSuccess ====" + response);        Gson mGson = new Gson();        List<AppInfo> apkInfos = mGson.fromJson(response, AppBean.class).getApkInfos();        if (apkInfos.isEmpty()) {            return;        }        appInfo = apkInfos.get(0);        if (appInfo == null) {            return;        }        String currentVersion = VersionUtil.getSpecAppVersionName(mContext, mContext.getApplicationContext().getPackageName());        String serverVersion = appInfo.getVersion();        boolean isNewVersion = VersionUtil.isNewVersion(currentVersion, serverVersion);        Logger.i(TAG, "currentVersion: " + currentVersion);        Logger.i(TAG, "serverVersion: " + serverVersion);        Logger.i(TAG, "isNewVersion(): " + isNewVersion);        //已经是最新版了        if (!isNewVersion) {            Logger.i(TAG, "当前电子表是最新版");            //检测更新后是新版，并且跟文件版本不同，则是新版            comparedAppVersion();            //如果没有更新则删除已存在的apk            if (FileUtil.isCheckExist(InitParam.getDownloadPath(this.reqUrl) + "/" + InitParam.APK_NAME)) {                //TODO:需要开线程?                FileUtil.deleteApkFile(InitParam.getDownloadPath(this.reqUrl) + "/" + InitParam.APK_NAME);                FileUtil.deleteApkFile(InitParam.getDownloadPath(this.reqUrl) + "/" + InitParam.PROJECT_NAME);            }            return;        } else {            Logger.i(TAG, "当前电子表不是最新版，服务器有最新版");        }        File apkFile = new File(InitParam.getDownloadPath(this.reqUrl) + "/" + InitParam.APK_NAME);        String apkMD5 = Md5Manager.fileToMD5(apkFile.getPath());        if (apkFile.exists() && apkMD5 != null && apkMD5.compareTo(appInfo.getSign()) == 0) {            Logger.i(TAG, "apk文件完整");            Logger.i(TAG, "apk文件路径: " + apkFile.getPath());            isDownloadApk = true;            if (isPermitUpdateApk == CTConstant.INSTALL_YES) {                installApk();            } else {                if (getView() != null) {                    getView().showUpdateApk();                }            }        } else {            Logger.i(TAG, "apk文件不完整或不存在，删除重新下载");            apkFile.delete();            FileUtil.deleteApkFile(InitParam.getDownloadPath(this.reqUrl) + "/" + InitParam.PROJECT_NAME);            Logger.i(TAG, "download  " + appInfo.getUrl());            OkHttpHelper.download(appInfo.getUrl(), InitParam.getDownloadPath(this.reqUrl), InitParam.APK_NAME, "HomeActivity", this);        }    }    @Override    public void onFailure(Call call, IOException e) {    }    @Override    public void onDownloadSuccess(File file) {        if (file.getPath().equals(InitParam.getDownloadPath(this.reqUrl) + "/" + InitParam.APK_NAME)) {            String apkMD5 = Md5Manager.fileToMD5(file.getPath());            if (apkMD5 != null && apkMD5.compareTo(appInfo.getSign()) == 0) {                isDownloadApk = true;                EventBus.getDefault().post(new EventMessage("下载成功"));                Logger.i(TAG, "apk文件下载成功，路径: " + file.getPath());                //如果更新框点了yes则安装apk                if (isPermitUpdateApk == CTConstant.INSTALL_YES) {                    installApk();                } else {                    if (getView() != null) {                        // 防止进入工厂模式，apk下载完成，切换服务器，返回Home界面，弹出切换前下载的apk。                        if (!SpManager.getChangedServer()) {                            getView().showUpdateApk();                        }                    }                }            }        }    }    @Override    public void onDownLoading(int progress, long lave) {        if (lave == 0) {            Logger.d(InitParam.APK_NAME + " 下载进度: %" + progress, "剩余: " + lave + " 字节");            Logger.d(InitParam.APK_NAME + " 下载完成");            return;        }        // 间隔3秒打印。        long cur = System.currentTimeMillis();        if (cur - time > 3000) {            time = cur;            Logger.e(InitParam.APK_NAME + " 下载进度: %" + progress, "剩余: " + lave + " 字节");        }    }    @Override    public void onDownloadFailed(Exception e) {        //Logger.d("下载失败" + e.getMessage());        EventBus.getDefault().post(new EventMessage("下载失败"));    }    void installApk() {        isPermitUpdateApk = CTConstant.INSTALL_YES;        if (isDownloadApk) {            SpManager.setInstallOpen(true);            SpManager.setUpdateIsNetwork(true);            new Thread(() -> ShellCmdUtils.getInstance().execCommand("pm install -r " + InitParam.getDownloadPath(this.reqUrl) + "/" + InitParam.APK_NAME)).start();            ShellCmdUtils.getInstance().execCommand("sync");        }    }    protected boolean isUpDateYes() {        return (isPermitUpdateApk == CTConstant.INSTALL_YES);    }    void reSetSleepTime() {        getView().reSetSleepTime();    }    void wakeUpSleep() {        getView().wakeUpSleep();    }    int getSafeKeyDelayTime(boolean isRebootFinish) {        //当前速度或者最后下发的速度        int speed = ErrorManager.getInstance().lastSpeed;        if (ControlManager.deviceType == CTConstant.DEVICE_TYPE_AC) {            speed = (int) (speed / SpManager.getSpeedRate());        } else if (ControlManager.deviceType == CTConstant.DEVICE_TYPE_AA) {            speed = (int) (speed / SpManager.getRpmRate());        }        int delayTime = 0;        if (!isRebootFinish) {            return 3000;        }        if (ControlManager.deviceType == CTConstant.DEVICE_TYPE_AC) {            if (speed > 0 && speed < 8) {                delayTime = 1000;            } else if (speed >= 8 && 20 >= speed) {                delayTime = 2 * 1000;            } else if (speed >= 21 && 40 >= speed) {                delayTime = 4 * 1000;            } else if (speed >= 41 && 60 >= speed) {                delayTime = 6 * 1000;            } else if (speed >= 61 && 80 >= speed) {                delayTime = 7 * 1000;            } else if (speed >= 81 && 100 >= speed) {                delayTime = 8 * 1000;            } else if (speed >= 101 && 120 >= speed) {                delayTime = 10 * 1000;            } else if (speed >= 121 && 140 >= speed) {                delayTime = 12 * 1000;            } else if (speed >= 141 && 160 >= speed) {                delayTime = 13 * 1000;            } else if (speed >= 161 && 180 >= speed) {                delayTime = 14 * 1000;            } else if (speed >= 181 && 210 >= speed) {                delayTime = 18 * 1000;            } else if (speed >= 211 && 250 >= speed) {                delayTime = 20 * 1000;            }        } else if (ControlManager.deviceType == CTConstant.DEVICE_TYPE_AA) {            if (speed > 0 && 20 >= speed) {                delayTime = 2 * 1000;            } else if (speed >= 21 && 40 >= speed) {                delayTime = 3 * 1000;            } else if (speed >= 41 && 60 >= speed) {                delayTime = 4 * 1000;            } else if (speed >= 61 && 80 >= speed) {                delayTime = 5 * 1000;            } else if (speed >= 81 && 100 >= speed) {                delayTime = 7 * 1000;            } else if (speed >= 101 && 120 >= speed) {                delayTime = 8 * 1000;            } else if (speed >= 121 && 140 >= speed) {                delayTime = 10 * 1000;            } else if (speed >= 141 && 160 >= speed) {                delayTime = 12 * 1000;            } else if (speed >= 161 && 180 >= speed) {                delayTime = 13 * 1000;            } else if (speed >= 181 && 210 >= speed) {                delayTime = 15 * 1000;            } else if (speed >= 211 && 250 >= speed) {                delayTime = 18 * 1000;            } else if (speed >= 251) {                delayTime = 20 * 1000;            }            delayTime = delayTime + 3000;        } else if (ControlManager.deviceType == CTConstant.DEVICE_TYPE_DC) {            if (speed > 0 && speed < 8) {                delayTime = 1000;            } else if (speed >= 8 && 20 >= speed) {                delayTime = 2 * 1000;            } else if (speed >= 21 && 40 >= speed) {                delayTime = 4 * 1000;            } else if (speed >= 41 && 60 >= speed) {                delayTime = 6 * 1000;            } else if (speed >= 61 && 80 >= speed) {                delayTime = 7 * 1000;            } else if (speed >= 81 && 100 >= speed) {                delayTime = 8 * 1000;            } else if (speed >= 101 && 120 >= speed) {                delayTime = 10 * 1000;            } else if (speed >= 121 && 140 >= speed) {                delayTime = 12 * 1000;            } else if (speed >= 141 && 160 >= speed) {                delayTime = 13 * 1000;            } else if (speed >= 161 && 180 >= speed) {                delayTime = 14 * 1000;            } else if (speed >= 181 && 210 >= speed) {                delayTime = 18 * 1000;            } else if (speed >= 211 && 250 >= speed) {                delayTime = 20 * 1000;            }        }        if (ControlManager.deviceType == CTConstant.DEVICE_TYPE_DC && speed != 0) {            return delayTime + 3500;        }        return delayTime;    }    boolean isQuickStartEnable() {        return getView().isQuickStartEnable();    }    /**     * 设置语言、音量和亮度的预设值     */    public void setVolumeAndBrightness() {        if (!SpManager.getInitLanguageSoundBrightness()) {            SpManager.setInitLanguageSoundBrightness(true);            SystemSoundManager.getInstance().setAudioVolume(6, SystemSoundManager.maxVolume);            SystemBrightManager.setBrightness(mContext, 167);        }    }}