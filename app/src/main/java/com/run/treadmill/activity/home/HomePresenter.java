package com.run.treadmill.activity.home;import android.content.Context;import com.chuhui.btcontrol.BtHelper;import com.run.serial.SerialCommand;import com.run.treadmill.activity.runMode.RunningParam;import com.run.treadmill.base.BasePresenter;import com.run.treadmill.common.CTConstant;import com.run.treadmill.manager.ControlManager;import com.run.treadmill.manager.ErrorManager;import com.run.treadmill.manager.SpManager;import com.run.treadmill.manager.SystemBrightManager;import com.run.treadmill.manager.SystemSoundManager;import com.run.treadmill.manager.control.NormalParam;import com.run.treadmill.manager.control.ParamCons;import com.run.treadmill.util.UnitUtil;import java.util.Arrays;public class HomePresenter extends BasePresenter<HomeView> {    private Context mContext;    void setContext(Context context) {        this.mContext = context;    }    public void setUpRunningParam(boolean isMetric) {        RunningParam.reset();        Arrays.fill(RunningParam.getInstance().mInclineArray, 0.0f);        Arrays.fill(RunningParam.getInstance().mSpeedArray, SpManager.getMinSpeed(isMetric));    }    /**     * 检测加油提示和加锁     */    void checkLubeAndLock() {        if (SpManager.getMaxLubeDis() != 0 && SpManager.getMaxLubeDis() - SpManager.getRunLubeDis() <= 0) {            getView().showLube();            return;        }        if ((SpManager.getBackUpTotalRunDis() > 0 && (SpManager.getBackUpTotalRunDis() - SpManager.getBackUpRunDis() <= 0))                || (SpManager.getBackUpRunTotalTime() > 0 && (SpManager.getBackUpRunTotalTime() - SpManager.getBackUpRunTime() <= 0))) {            getView().showLock();            return;        }        /*if (checkMachineLubeNull()) {            getView().showMachineLue(CTConstant.SHOW_TIPS_MACHINE_LUBE_NULL);        }*/    }    public boolean checkMachineLubeNull() {//        return (machineLubeValue != 0);        return false;    }    public void startMachineLubeTimer() {        getView().reSetSleepTime();        getView().startMachineLubeTimer();    }    void enterSettingLock() {        getView().enterSettingLock();    }    @Override    public void onSucceed(byte[] data, int len) {        super.onSucceed(data, len);        if (data[2] == SerialCommand.TX_RD_SOME && data[3] == ParamCons.NORMAL_PACKAGE_PARAM) {            int homeHr;            if (resolveDate(data, NormalParam.HR_VALUE1_INX, NormalParam.HR_VALUE1_LEN) == 0) {                homeHr = (resolveDate(data, NormalParam.HR_VALUE2_INX, NormalParam.HR_VALUE2_LEN));            } else {                homeHr = (resolveDate(data, NormalParam.HR_VALUE1_INX, NormalParam.HR_VALUE1_LEN));            }            if (homeHr >= 0) {                if (BtHelper.getInstance().connected()) {                    // 设置发到中颖蓝牙的心率, 在home界面有心跳，zwift也能搜到心率                    BtHelper.getInstance().getRunParamBuilder()                            .hr(homeHr);                }            }        }    }    void reSetSleepTime() {        getView().reSetSleepTime();    }    void wakeUpSleep() {        getView().wakeUpSleep();    }    int getSafeKeyDelayTime(boolean isRebootFinish) {        //当前速度或者最后下发的速度        int speed = ErrorManager.getInstance().lastSpeed;        if (ControlManager.deviceType == CTConstant.DEVICE_TYPE_AC) {            speed = (int) (speed / SpManager.getSpeedRate());        } else if (ControlManager.deviceType == CTConstant.DEVICE_TYPE_AA) {            speed = (int) (speed * 1.0f / SpManager.getRpmRate() * 10);        }        int delayTime = 0;        if (!isRebootFinish) {            return 3000;        }        if (ControlManager.deviceType == CTConstant.DEVICE_TYPE_AC) {        } else if (ControlManager.deviceType == CTConstant.DEVICE_TYPE_AA) {            if (speed > 0 && 20 >= speed) {                delayTime = 2 * 1000;            } else if (speed >= 21 && 40 >= speed) {                delayTime = 3 * 1000;            } else if (speed >= 41 && 60 >= speed) {                delayTime = 4 * 1000;            } else if (speed >= 61 && 80 >= speed) {                delayTime = 5 * 1000;            } else if (speed >= 81 && 100 >= speed) {                delayTime = 7 * 1000;            } else if (speed >= 101 && 120 >= speed) {                delayTime = 8 * 1000;            } else if (speed >= 121 && 140 >= speed) {                delayTime = 10 * 1000;            } else if (speed >= 141 && 160 >= speed) {                delayTime = 12 * 1000;            } else if (speed >= 161 && 180 >= speed) {                delayTime = 13 * 1000;            } else if (speed >= 181 && 210 >= speed) {                delayTime = 15 * 1000;            } else if (speed >= 211 && 250 >= speed) {                delayTime = 18 * 1000;            } else if (speed >= 251) {                delayTime = 20 * 1000;            }            delayTime = delayTime + 3000;        } else if (ControlManager.deviceType == CTConstant.DEVICE_TYPE_DC) {        }        if (ControlManager.deviceType == CTConstant.DEVICE_TYPE_DC && speed != 0) {            return delayTime + 3500;        }        return delayTime;    }    /**     * 设置语言、音量和亮度的预设值     */    public void setVolumeAndBrightness() {        if (!SpManager.getInitLanguageSoundBrightness()) {            SpManager.setInitLanguageSoundBrightness(true);            SystemSoundManager.getInstance().setAudioVolume((int) (0.6 * SystemSoundManager.maxVolume), SystemSoundManager.maxVolume);            SystemBrightManager.setBrightness(mContext, 167);        }    }}